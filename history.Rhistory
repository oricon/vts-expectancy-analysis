fulldata <- data.frame()
for (file in filelist) {
rawdata <- fread(file, nThread = 6)
if ("OS" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN,
OS, browser, xResolution, yResolution)
data$platform = "online"
} else if ("rewExpect" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
} else {data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
data$rewExpect = NA
}
data <- data %>%
mutate(condition = ifelse(!is.na(training.thisN), "training", data$condition))
data <- data %>%
filter(!rewCond == "vtsPrac") %>%
filter(!(condition == "" & task == ""))
filename=sprintf("%s/data_parsed/%s_vts_reward_expectancy_%s.csv", workdir,
data$participant[1], data$platform[1])
write.csv(data, filename)
fulldata <- rbind.data.frame(fulldata,data)
}
file
filelist<- Sys.glob(file.path(workdir,"data","*","*vts_reward_expectancy_*.csv"))
fulldata <- data.frame()
for (file in filelist) {
rawdata <- fread(file, nThread = 6)
if ("OS" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN,
OS, browser, xResolution, yResolution)
data$platform = "online"
} else if ("rewExpect" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
} else {data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
data$rewExpect = NA
}
data <- data %>%
mutate(condition = ifelse(!is.na(training.thisN), "training", data$condition))
data <- data %>%
filter(!rewCond == "vtsPrac") %>%
filter(!(condition == "" & task == ""))
filename=sprintf("%s/data_parsed/%s_vts_reward_expectancy_%s.csv", workdir,
data$participant[1], data$platform[1])
write.csv(data, filename)
fulldata <- rbind.data.frame(fulldata,data)
}
file
filelist<- Sys.glob(file.path(workdir,"data","*","*vts_reward_expectancy_*.csv"))
fulldata <- data.frame()
for (file in filelist) {
rawdata <- fread(file, nThread = 6)
if ("OS" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN,
OS, browser, xResolution, yResolution)
data$platform = "online"
} else if ("rewExpect" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
} else {data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
data$rewExpect = NA
}
data <- data %>%
mutate(condition = ifelse(!is.na(training.thisN), "training", data$condition))
data <- data %>%
filter(!rewCond == "vtsPrac") %>%
filter(!(condition == "" & task == ""))
filename=sprintf("%s/data_parsed/%s_vts_reward_expectancy_%s.csv", workdir,
data$participant[1], data$platform[1])
write.csv(data, filename)
fulldata <- rbind.data.frame(fulldata,data)
}
fulldata <- fulldata %>%
mutate(rewCond = ifelse(condition == "training", NA,fulldata$rewCond))
fulldata <- unite(fulldata, RT, c(training_resp.rt, target_resp.rt), na.rm = TRUE)
fulldata$RT <- as.numeric(fulldata$RT)
fulldata$RT <- fulldata$RT * 1000 # convert from sec to ms
fulldata <- rename(fulldata, shape = curr_shape)
fulldata <- fulldata %>%
mutate(condition = ifelse(acc == 0, "error", fulldata$condition))
fulldata <- fulldata %>%
mutate(condition = ifelse(!is.na(trainBlock), "training", fulldata$condition))
fulldata <- fulldata %>%
mutate(rewCond = case_when(rewCond == "noRew" & !is.na(trials_rew.thisRepN) ~ "Rew",
rewCond == "Lo" ~ "Lo",
rewCond == "Hi" ~ "Hi",
rewCond == "noRew" ~ "noRew"))
# For early participants the rewCond and rewExpect wasn't logged
summary_recode <- fulldata %>%
filter(points_trial > 0) %>%
filter(!condition == "training") %>%
group_by(participant, shape, points_trial) %>%
summarise(n=n(), .groups = "drop_last") %>%
summarise(lowProp = n[points_trial == 1]/sum(n), count=sum(n), .groups = "keep") %>%
ungroup() %>%
complete(participant, shape, fill = list(lowProp = 0, count = 0))
# Sort by low high
# The lowest and highest value for each subject should be high expectancy,
# the middle two values should be low expectancy
rewCond_shape <- summary_recode %>%
group_by(participant) %>%
arrange(participant, lowProp) %>%
mutate(rewExpectCond = row_number(participant)) %>%
mutate(rewExpectCond_Label = case_when(rewExpectCond == 1 ~ "HE_HR",
rewExpectCond == 2 ~ "LE_HR",
rewExpectCond == 3 ~ "LE_LR",
rewExpectCond == 4 ~ "HE_LR"))
fulldata <- fulldata %>%
left_join(rewCond_shape, fulldata, by = c("participant", "shape"))
View(summary_recode)
reward_summary <- fulldata %>%
filter(cond == "Hi" | cond == "Lo") %>%
group_by(participant, rewCond, rewExpect, rewExpectCond_Label) %>%
summarise(n=n())
reward_summary <- fulldata %>%
filter(condition == "Hi" | condition == "Lo") %>%
group_by(participant, rewCond, rewExpect, rewExpectCond_Label) %>%
summarise(n=n())
View(reward_summary)
# Next step:
# Create new variables (LE_LR, LE_HR, HE_LR, HE_HR)
# Based of the order of lowHigh within each participant
# Mutate?
reward_summary <- fulldata %>%
filter(rewCond == "Hi" | rewCond == "Lo") %>%
group_by(participant, rewCond, rewExpect, rewExpectCond_Label) %>%
summarise(n=n())
View(reward_summary)
qc_numTrials <- fulldata %>%
mutate("condition" = case_when((task == "letter" | task == "number") ~ "test")) %>%
group_by(participant, condition) %>%
filter(condition == "test") %>%
summarise(n = n(), .groups = "keep")
lowTrials <- qc_numTrials %>%
filter(n < 190) %>%
select(participant)
excludeSubjs <- lowTrials$participant
nSubs <- nrow(qc_numTrials)
n_pages <- ceiling(nSubs/15)
p <- fulldata %>%
filter(acc == 1) %>%
filter(RT < 10000) %>%
ggplot(aes(x=RT)) + geom_histogram(bins=20) +
facet_wrap_paginate(~ participant, nrow = 5, ncol = 3) +
ggtitle("Histogram of Correct RTs")
for(i in 1:n_pages(p)){
p_save <-  p +
facet_wrap_paginate(~ participant, nrow = 5, ncol = 3, page = i)
ggsave(plot = p_save, filename = paste0('RT_hist_', i, '.pdf'),
device = cairo_pdf, path = here("Rdata"))
}
summary_RT <- fulldata %>%
filter(!condition == "training") %>%
group_by(participant, platform) %>%
filter(RT>200 & acc==1 & E1==0) %>%
summarise(meanRT = mean(RT, na.rm = TRUE),
logRT = log10(meanRT),
sdRT = sd(RT, na.rm = TRUE),
count = sum(!is.na(RT)), .groups = "keep")
summary(summary_RT)
summary_RT %>%
ggplot(aes(x=meanRT)) +
facet_grid(rows = vars(platform)) +
geom_histogram(bins=7) +
geom_vline(data = filter(summary_RT, platform=="inlab"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
geom_vline(data = filter(summary_RT, platform=="online"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Mean RT", breaks = seq(400,1500,200)) +
scale_y_continuous(name = "Count", breaks = seq(0,20,5))
summary_RT %>%
ggplot(aes(x=meanRT)) +
facet_grid(rows = vars(platform)) +
geom_histogram(bins=8) +
geom_vline(data = filter(summary_RT, platform=="inlab"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
geom_vline(data = filter(summary_RT, platform=="online"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Mean RT", breaks = seq(400,1500,200)) +
scale_y_continuous(name = "Count", breaks = seq(0,30,5))
summary_RT %>%
ggplot(aes(x=meanRT)) +
facet_grid(rows = vars(platform)) +
geom_histogram(bins=10) +
geom_vline(data = filter(summary_RT, platform=="inlab"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
geom_vline(data = filter(summary_RT, platform=="online"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Mean RT", breaks = seq(400,1500,200)) +
scale_y_continuous(name = "Count", breaks = seq(0,30,5))
summary_RT %>%
ggplot(aes(x=meanRT)) +
facet_grid(rows = vars(platform)) +
geom_histogram(bins=10) +
geom_vline(data = filter(summary_RT, platform=="inlab"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
geom_vline(data = filter(summary_RT, platform=="online"),
aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Mean RT", breaks = seq(400,1500,200)) +
scale_y_continuous(name = "Count", breaks = seq(0,50,5))
RT_outliers <- fulldata %>%
filter(!condition == "training") %>%
group_by(participant) %>%
filter(RT>200 & acc==1 & E1==0) %>%
summarise(meanRT = mean(RT, na.rm = TRUE)) %>%
identify_outliers(meanRT)
RT_exclude <- subset(RT_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- RT_exclude
summary_ACC <- fulldata %>%
filter(!condition == "training") %>%
group_by(participant) %>%
summarise(ACC = mean(acc, na.rm = TRUE),
asinACC = asin(sqrt((mean(acc, na.rm = TRUE)))),
count=sum(!is.na(RT)), .groups = "keep")
summary(summary_ACC)
summary_ACC %>%
ggplot(aes(x=ACC)) +
geom_histogram(bins=8) +
geom_vline(aes(xintercept=median(ACC)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Accuracy", breaks = seq(0, 1, .05)) +
scale_y_continuous(name = "Count", breaks = seq(0,30,5))
summary_ACC %>%
ggplot(aes(x=ACC)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(ACC)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Accuracy", breaks = seq(0, 1, .05)) +
scale_y_continuous(name = "Count", breaks = seq(0,30,5))
summary_ACC %>%
ggplot(aes(x=ACC)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(ACC)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Accuracy", breaks = seq(0, 1, .05)) +
scale_y_continuous(name = "Count", breaks = seq(0,50,5))
summary_ACC %>%
ggplot(aes(x=ACC)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(ACC)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Accuracy", breaks = seq(0, 1, .05)) +
scale_y_continuous(name = "Count", breaks = seq(0,60,5))
ACC_outliers <- fulldata %>%
filter(!condition == "training") %>%
group_by(participant) %>%
summarise(ACC = mean(acc, na.rm = TRUE)) %>%
identify_outliers(ACC)
ACC_exclude <- subset(ACC_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,ACC_exclude)
excludeSubjs <- unique(excludeSubjs)
View(excludeSubjs)
View(ACC_exclude)
View(ACC_outliers)
summary_training <- fulldata %>%
filter(condition == "training") %>%
group_by(participant) %>%
summarise(points = sum(points_trial), sd = sd(points_trial))
summary(summary_training)
summary_training %>% ggplot(aes(x=points)) + geom_histogram(bins=10)
# training_outliers <- summary_training %>%
#   identify_outliers(points)
#
#   filter(points < 500) %>%
#   select(participant)
# excludeSubjs <- rbind(excludeSubjs, training_outliers)
# excludeSubjs <- unique(excludeSubjs)
View(summary_training)
summary_task_choice <- fulldata %>%
filter(!condition == "training") %>%
group_by(participant, task) %>%
summarise(n = n(), .groups = "drop_last") %>%
summarise(lettProp = sum(n[task=="letter"])/sum(n))
summary(summary_task_choice)
summary_task_choice %>%
ggplot(aes(x=lettProp)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(lettProp)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Letter Task Choice Proportion", breaks = seq(0, 1, .1)) +
scale_y_continuous(name = "Count", breaks = seq(0,30,5))
summary_task_choice %>%
ggplot(aes(x=lettProp)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(lettProp)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Letter Task Choice Proportion", breaks = seq(0, 1, .1)) +
scale_y_continuous(name = "Count", breaks = seq(0,60,5))
summary_task_choice %>%
ggplot(aes(x=lettProp)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(lettProp)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Letter Task Choice Proportion", breaks = seq(0, 1, .1)) +
scale_y_continuous(name = "Count", breaks = seq(0,100,5))
summary_task_choice %>%
ggplot(aes(x=lettProp)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(lettProp)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Letter Task Choice Proportion", breaks = seq(0, 1, .1)) +
scale_y_continuous(name = "Count", breaks = seq(0,100,10))
task_outliers <- summary_task_choice %>%
identify_outliers(lettProp)
task_exclude <- subset(task_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,task_exclude)
excludeSubjs <- unique(excludeSubjs)
View(task_outliers)
summary_VSR <- fulldata %>%
group_by(participant, alt) %>%
summarise(n = n(), .groups = "drop_last") %>%
summarise(VSR = n[alt=="switch"]/sum(n), count=sum(n), .groups = "keep") %>%
filter(!is.na(VSR))
summary(summary_VSR)
summary_VSR %>%
ggplot(aes(x=VSR)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(VSR)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Voluntary Switch Rate", breaks = seq(0.0, 1.0, .1)) +
scale_y_continuous(name = "Count", breaks = seq(0,30,5))
summary_VSR %>%
ggplot(aes(x=VSR)) +
geom_histogram(bins=10) +
geom_vline(aes(xintercept=median(VSR)), color="blue", linetype="dashed", size=1) +
scale_x_continuous(name="Voluntary Switch Rate", breaks = seq(0.0, 1.0, .1)) +
scale_y_continuous(name = "Count", breaks = seq(0,50,5))
summary_VSR %>%
identify_outliers(VSR)
# normal outlier detection doesn't work on these probability data because Q1-3*IQR is negative
# so calculate by hand using the same criteria to ID extreme outliers (3*IQR)
Q1 = quantile(summary_VSR$VSR, probs = .25); Q3 = quantile(summary_VSR$VSR, probs = .75);
IQR = Q3-Q1
VSR_exclude <- summary_VSR %>%
filter( (VSR < Q1-3*IQR) || (VSR > Q3+3*IQR) ) %>%
ungroup() %>% select(participant)
43+45+47+48
32/183
183/32
q()
library(here)
library(tidyverse)
library(data.table)
library(rstatix)
library(zoo)
library(ggforce)
library(ggpubr)
library(afex)
library(optimx)
library(emmeans)
library(ggeffects)
library(ggbeeswarm)
library(sjPlot)
library(viridis)
library(RColorBrewer)
library(xtable)
library(redcapAPI)
workdir=here()
knitr::opts_knit$set(root.dir = workdir)
filelist<- Sys.glob(file.path(workdir,"data","*","*vts_reward_expectancy_*.csv"))
fulldata <- data.frame()
for (file in filelist) {
rawdata <- fread(file, nThread = 6)
if ("OS" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN,
OS, browser, xResolution, yResolution)
data$platform = "online"
} else if ("rewExpect" %in% colnames(rawdata)) {
data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
} else {data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul,
alt, task, condition, rewCond, curr_shape, curr_topStim,
curr_bottStim, blockNum, LShape_ID, RShape_ID,
trainBlock, training.thisN, training_resp.keys, training_resp.rt,
target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
data$platform = "inlab"
data$OS = "MacIntel"
data$browser = NA
data$xResolution = NA
data$yResolution = NA
data$rewExpect = NA
}
data <- data %>%
mutate(condition = ifelse(!is.na(training.thisN), "training", data$condition))
data <- data %>%
filter(!rewCond == "vtsPrac") %>%
filter(!(condition == "" & task == ""))
filename=sprintf("%s/data_parsed/%s_vts_reward_expectancy_%s.csv", workdir,
data$participant[1], data$platform[1])
write.csv(data, filename)
fulldata <- rbind.data.frame(fulldata,data)
}
fulldata <- fulldata %>%
mutate(rewCond = ifelse(condition == "training", NA,fulldata$rewCond))
fulldata <- unite(fulldata, RT, c(training_resp.rt, target_resp.rt), na.rm = TRUE)
fulldata$RT <- as.numeric(fulldata$RT)
fulldata$RT <- fulldata$RT * 1000 # convert from sec to ms
fulldata <- rename(fulldata, shape = curr_shape)
fulldata <- fulldata %>%
mutate(condition = ifelse(acc == 0, "error", fulldata$condition))
fulldata <- fulldata %>%
mutate(condition = ifelse(!is.na(trainBlock), "training", fulldata$condition))
fulldata <- fulldata %>%
mutate(rewCond = case_when(rewCond == "noRew" & !is.na(trials_rew.thisRepN) ~ "Rew",
rewCond == "Lo" ~ "Lo",
rewCond == "Hi" ~ "Hi",
rewCond == "noRew" ~ "noRew"))
# For early participants the rewCond and rewExpect wasn't logged
summary_recodeL <- fulldata %>%
filter(points_trial > 0) %>%
filter(condition == "training") %>%
filter(training_resp.keys == "a") %>%
group_by(participant, LShape_ID, points_trial) %>%
summarise(n=n(), .groups = "drop_last") %>%
summarise(lowProp = n[points_trial == 1]/sum(n), count=sum(n), .groups = "keep") %>%
ungroup() %>%
complete(participant, shape, fill = list(lowProp = 0, count = 0))
# For early participants the rewCond and rewExpect wasn't logged
summary_recodeL <- fulldata %>%
filter(points_trial > 0) %>%
filter(condition == "training") %>%
filter(training_resp.keys == "a") %>%
group_by(participant, LShape_ID, points_trial) %>%
summarise(n=n(), .groups = "drop_last") %>%
summarise(lowProp = n[points_trial == 1]/sum(n), count=sum(n), .groups = "keep") %>%
ungroup() %>%
complete(participant, LShape_ID, fill = list(lowProp = 0, count = 0))
View(summary_recodeL)
summary_recodeR <- fulldata %>%
filter(points_trial > 0) %>%
filter(condition == "training") %>%
filter(training_resp.keys == "a") %>%
group_by(participant, RShape_ID, points_trial) %>%
summarise(n=n(), .groups = "drop_last") %>%
summarise(lowProp = n[points_trial == 1]/sum(n), count=sum(n), .groups = "keep") %>%
ungroup() %>%
complete(participant, RShape_ID, fill = list(lowProp = 0, count = 0))
summary_recode$participant <- summary_recodeL$participant
summary_recode <- data.frame('participant' = summary_recodeL$participant,
'shape' = summary_recodeL$LShape_ID)
View(summary_recode)
summary_recode$lowHigh = (summary_recodeL$lowHigh*summary_recodeL$count +
summary_recodeR$lowHigh*summary_recodeR$count)/
(summary_recodeL$count + summary_recodeR$count)
savehistory("~/Documents/repositories/vts-expectancy-analysis/history.Rhistory")

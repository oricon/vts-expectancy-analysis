---
title: "VTS_RewardExpectancy"
author: "Joseph Orr"
format: html
editor: visual
---

```{r Setup Libraries, message=FALSE, warning=FALSE, include=FALSE}
library(here)
library(tidyverse)
library(data.table)
library(rstatix)
library(zoo)
library(ggforce)
library(ggpubr)
library(afex)
library(optimx)
library(emmeans)
library(ggeffects)
library(ggbeeswarm)
library(sjPlot)
library(viridis)
library(RColorBrewer)
library(xtable)
library(redcapAPI)
```
```{r Setup path, include=FALSE}
workdir=here()
knitr::opts_knit$set(root.dir = workdir)
```
# Read in data
```{r Read in raw data, include=FALSE}
filelist<- Sys.glob(file.path(workdir,"data","*","*vts_reward_expectancy_*.csv"))
fulldata <- data.frame()

for (file in filelist) {
  rawdata <- fread(file, nThread = 6)
  if ("OS" %in% colnames(rawdata)) {
    data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul, 
                               alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim, 
                               curr_bottStim, blockNum, LShape_ID, RShape_ID, 
                               trainBlock, training.thisN, training_resp.keys, training_resp.rt, 
                               target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN,
                               OS, browser, xResolution, yResolution)
    data$platform = "online"
    } else if ("rewExpect" %in% colnames(rawdata)) {
      data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul, 
                               alt, task, condition, rewExpect, rewCond, curr_shape, curr_topStim, 
                               curr_bottStim, blockNum, LShape_ID, RShape_ID, 
                               trainBlock, training.thisN, training_resp.keys, training_resp.rt, 
                               target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
      data$platform = "inlab"
      data$OS = "MacIntel"
      data$browser = NA
      data$xResolution = NA
      data$yResolution = NA
    } else {data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul, 
                               alt, task, condition, rewCond, curr_shape, curr_topStim, 
                               curr_bottStim, blockNum, LShape_ID, RShape_ID, 
                               trainBlock, training.thisN, training_resp.keys, training_resp.rt, 
                               target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
      data$platform = "inlab"
      data$OS = "MacIntel"
      data$browser = NA
      data$xResolution = NA
      data$yResolution = NA
      data$rewExpect = NA
      }
  
  data <- data %>% 
    mutate(condition = ifelse(!is.na(training.thisN), "training", data$condition))
  
  data <- data %>% 
    filter(!rewCond == "vtsPrac") %>% 
    filter(!(condition == "" & task == ""))
  fulldata <- rbind.data.frame(fulldata,data)
}
```
## Recode variable and determine missing rewCond for early subjects
```{r Recode variables}
fulldata <- fulldata %>% 
  mutate(rewCond = ifelse(condition == "training", NA,fulldata$rewCond))
fulldata <- unite(fulldata, RT, c(training_resp.rt, target_resp.rt), na.rm = TRUE)
fulldata$RT <- as.numeric(fulldata$RT)
fulldata$RT <- fulldata$RT * 1000 # convert from sec to ms  


fulldata <- rename(fulldata, shape = curr_shape)
fulldata <- fulldata %>% 
  mutate(condition = ifelse(acc == 0, "error", fulldata$condition))

fulldata <- fulldata %>% 
  mutate(condition = ifelse(!is.na(trainBlock), "training", fulldata$condition))

# To find missing rewCond, compare average points for each rewExpect level
fulldata <- fulldata %>% 
  mutate(rewCond = case_when(rewCond == "noRew" & !is.na(trials_rew.thisRepN) ~ "Rew",
                             rewCond == "Lo" ~ "Lo",
                             rewCond == "Hi" ~ "Hi",
                             rewCond == "noRew" ~ "noRew"))
summary_recode <- fulldata %>% 
  filter(!condition=="training") %>% 
  filter(points_trial > 0) %>% 
  filter(!is.na(rewExpect)) %>% 
  group_by(participant, rewExpect, shape, points_trial) %>% 
  tally(sort = FALSE) %>% 
  summarise(highProp = n[points_trial == 10]/sum(n), .groups = "drop_last") %>% 
  arrange(highProp, .by_group = TRUE) %>% 
  mutate(rewCond_new = case_when(participant == lead(participant) & 
                                   rewExpect == lead(rewExpect) &
                                   highProp < lead(highProp) ~ "Lo",
                                 participant == lag(participant) & 
                                   rewExpect == lag(rewExpect) &
                                   highProp > lag(highProp) ~ "Hi"))
fulldata <- left_join(fulldata, select(summary_recode, -highProp))
fulldata <- fulldata %>% 
  mutate(rewCond = case_when(!is.na(trials_norew.thisRepN) ~ "noRew",
                             rewCond == "Lo" ~ "Lo",
                             rewCond == "Hi" ~ "Hi",
                             condition == "training" ~ "training",
                             TRUE ~ rewCond_new))
fulldata <- select(fulldata, -rewCond_new)
fulldata <- fulldata %>% relocate(rewExpect, .before = rewCond)
  
# Set rewExpect and rewCond as factors
fulldata$rewCond <- as.factor(fulldata$rewCond)
fulldata$rewCond <- relevel(fulldata$rewCond, "Hi")
fulldata$rewExpect <- as.factor(fulldata$rewExpect)
fulldata$rewExpect <- relevel(fulldata$rewExpect, "high")

# Remove subjects without rewExpect (these should be corrected manually)
excludeSubjs <- fulldata %>% 
  filter(is.na(rewExpect)) %>% 
  group_by(participant, rewExpect) %>% 
  tally() %>% select(participant)

# Collapse trial numbers, code as numeric
fulldata <- unite(fulldata, trialNum, c(training.thisN, trials_norew.thisRepN, trials_rew.thisRepN), na.rm = TRUE)  
fulldata$trialNum <- as.numeric(fulldata$trialNum)
fulldata <- fulldata %>% filter(!is.na(trialNum))

# Previous Trial Reward Outcome
fulldata$prevRew=NA
fulldata <- fulldata %>% 
  mutate(prevRew = case_when(E1 == 1 ~ "error",
                             trialNum>0 & E1==0 & lag(rewCond)=="Lo" & lag(points_trial)==1  ~ "Lo",
                             trialNum>0 & E1==0 & lag(rewCond)=="Lo" & lag(points_trial)==10 ~ "Lo+",
                             trialNum>0 & E1==0 & lag(rewCond)=="Hi" & lag(points_trial)==10 ~ "Hi",
                             trialNum>0 & E1==0 & lag(rewCond)=="Hi" & lag(points_trial)==1  ~ "Hi-",
                             trialNum>0 & E1==0 & lag(rewCond)=="Hi" & lag(points_trial)==0  ~ "HiSlow"))
fulldata <- relocate(fulldata, prevRew, .before = rewCond)
fulldata$prevRew <- as.factor(fulldata$prevRew)
# Make high first
fulldata$prevRew <- relevel(fulldata$prevRew, "Hi")

# Recode as factors
fulldata$alt <- as.factor(fulldata$alt)
fulldata$alt <- relevel(fulldata$alt, "switch")
fulldata$platform <- as.factor(fulldata$platform)
fulldata$platform <- relevel(fulldata$platform, "inlab")
init_subs <- fulldata %>% group_by(participant) %>% tally()
```

# Read data from REDcap surveys
```{r Read survey data, eval=FALSE, include=FALSE}
JOE_TOKEN = "8092328E3AA4D7901F5341ADA9DD1177"
URL = "https://redcap.tamhsc.edu/api/"
rcon <- redcapConnection(url=URL, token=JOE_TOKEN)
df_redcap <- exportRecords(rcon)

survey_data_online <- survey_data_online %>% 
  select('ID','Gender','Age','Colorblind','Colorblind_type','Education','Race_White','Race_Hispanic','Race_Black','Race_NativeHaw','Race_Asian','Race_Indian','Race_MiddleEast','Race_Other','Race_Mixed','Race_NA','Race_OtherText','Tobacco_Freq','AlcoholFreq','AlcoholQuant','DrugsFreq','BISBAS1','BISBAS2','BISBAS3','BISBAS4','BISBAS5','BISBAS6','BISBAS7','BISBAS8','BISBAS9','BISBAS10','BISBAS11','BISBAS12','BISBAS13','BISBAS14','BISBAS15','BISBAS16','BISBAS17','BISBAS18','BISBAS19','BISBAS20','BISBAS21','BISBAS22','BISBAS23','BISBAS24')

survey_data <- rbind(survey_data_inlabDet, survey_data_inlabProb, survey_data_online)
survey_data <- survey_data %>% distinct(ID, .keep_all = TRUE)
only_surveys <- survey_data$ID[!(survey_data$ID %in% fulldata$participant)]
participant_demos <- survey_data %>% filter(ID %in% fulldata$participant)
```

```{undefined eval=FALSE, include=FALSE}
# Convert Race to 1/0 - When multiple are selected the totals will be more than the total n
participant_demos <- participant_demos %>% mutate(Race_White = ifelse(!is.na(Race_White),1,0)) %>% 
  mutate(Race_Hispanic = ifelse(!is.na(Race_Hispanic),1,0)) %>% 
  mutate(Race_Black = ifelse(!is.na(Race_Black),1,0)) %>% 
  mutate(Race_NativeHaw = ifelse(!is.na(Race_NativeHaw),1,0)) %>% 
  mutate(Race_Asian = ifelse(!is.na(Race_Asian),1,0)) %>% 
  mutate(Race_Indian = ifelse(!is.na(Race_Indian),1,0)) %>% 
  mutate(Race_MiddleEast = ifelse(!is.na(Race_MiddleEast),1,0)) %>% 
  mutate(Race_Other = ifelse(!is.na(Race_Other),1,0)) %>% 
  mutate(Race_Mixed = ifelse(!is.na(Race_Mixed),1,0))

# Convert BISBAS to Numerical for Easy Tabulation
participant_demos <- participant_demos %>% 
  mutate_at(vars(starts_with("BISBAS")),
            ~ case_when(. == "Very False For Me" ~ 1, 
                        . == "Somewhat False For Me" ~ 2, 
                        . == "Somewhat True For Me" ~ 3, 
                        . == "Very True For Me" ~ 4))

# BAS Drive = 3, 9, 12, 21
# BAS Fun Seeking = 5, 10, 15, 20
# BAS Reward Responsiveness = 4, 7, 14, 18, 23
# BIS = 2(-1), 8, 13, 16, 19, 22(-1), 24
participant_demos <- participant_demos %>% 
  mutate(BAS_Drive = (BISBAS3 + BISBAS9 + BISBAS12 + BISBAS21)) %>% 
  mutate(BAS_Fun = (BISBAS5 + BISBAS10 + BISBAS15 + BISBAS20)) %>% 
  mutate(BAS_RR = (BISBAS4 + BISBAS7 + BISBAS14 + BISBAS18 + BISBAS23)) %>% 
  mutate(BISBAS2 = 6 - BISBAS2) %>% 
  mutate(BISBAS22 = 6 - BISBAS22) %>% 
  mutate(BIS = (BISBAS2 + BISBAS8 + BISBAS13 + BISBAS16 + BISBAS19 + BISBAS22 + BISBAS24))

center_scale <- function(x) {
    scale(x, scale = FALSE)
}

# Convert substance use
participant_demos <- participant_demos %>% 
  mutate(Tobacco_Freq = case_when(Tobacco_Freq == "Frequently (> 5 a day)" ~ 5,
                        Tobacco_Freq == "Daily (< 5 a day)" ~ 4,
                        Tobacco_Freq == "Occasionally (3-4 a week)" ~ 3,
                        Tobacco_Freq == "Rarely (~1 a week)" ~ 2,
                        Tobacco_Freq == "Never" ~ 1)) %>% 
  mutate(AlcoholFreq = case_when(AlcoholFreq == "More than 5 times a week" ~ 5,
                                 AlcoholFreq == "2-3 times a week" ~ 4,
                                 AlcoholFreq == "1-2 times a week" ~ 3,
                                 AlcoholFreq == "Only occasionally" ~ 2,
                                 AlcoholFreq == "Never" ~ 1)) %>% 
  mutate(AlcoholQuant = case_when(AlcoholQuant == "More than 5 drinks" ~ 5,
                                  AlcoholQuant == "3-5 drinks" ~ 4,
                                  AlcoholQuant == "1-2 drinks" ~ 3,
                                  AlcoholQuant == "Only occasionally" ~ 2,
                                  AlcoholQuant == "Never" ~ 1)) %>% 
  mutate(DrugsFreq = case_when(DrugsFreq == "Daily" ~ 5,
                               DrugsFreq == "3-5 times a week" ~ 4,
                               DrugsFreq == "1-2 times a week" ~ 3,
                               DrugsFreq == "Only occasionally" ~ 2,
                               DrugsFreq == "Never" ~ 1))

median(participant_demos$Age, na.rm = TRUE)
sd(participant_demos$Age, na.rm = TRUE)
# Convert all character columns to factors to make it easier to tabulate
index <- 1:(ncol(participant_demos)-4)
participant_demos[ , index] <- 
  lapply(participant_demos[ , index], as.factor)
summary(participant_demos)
```

# Data cleaning
```{r}
n_pages <- ceiling(nrow(init_subs)/15)
p <- fulldata %>% 
  filter(acc == 1) %>% 
  filter(RT < 10000) %>% 
  ggplot(aes(x=RT)) + geom_histogram(bins=20) + 
  facet_wrap_paginate(~ participant, nrow = 5, ncol = 3) +
  ggtitle("Histogram of Correct RTs")
for(i in 1:n_pages(p)){
  p_save <-  p + 
    facet_wrap_paginate(~ participant, nrow = 5, ncol = 3, page = i)
  ggsave(plot = p_save, filename = paste0('RT_hist_', i, '.pdf'), 
         device = cairo_pdf, path = here("Rdata"))
}
```
Subjects to check: 12531, 57890, 293008, 293212, 294301, 294208, 294580, 297775, 295192, 

## RT data cleaning
```{r Summary stats for RT data, echo=TRUE}
summary_RT <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant, platform) %>%
  filter(RT>200 & acc==1 & E1==0) %>% 
  summarise(meanRT = mean(RT, na.rm = TRUE),
            sdRT = sd(RT, na.rm = TRUE),
            count = sum(!is.na(RT)), .groups = "keep")
summary(summary_RT)
```
```{r Plot RT Histogram, echo=TRUE}
summary_RT %>% 
  ggplot(aes(x=meanRT)) + 
  facet_grid(rows = vars(platform)) +
  geom_histogram(bins=10) +
  geom_vline(data = filter(summary_RT, platform=="inlab"),
             aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
  geom_vline(data = filter(summary_RT, platform=="online"),
             aes(xintercept=median(meanRT)), color="blue", linetype="dashed", size=1) +
  scale_x_continuous(name="Mean RT", breaks = seq(400,1800,200)) +
  scale_y_continuous(name = "Count", breaks = seq(0,40,5))
```
All levels of platform and platform have similar distributions
``` {r Determine RT outliers, warning=FALSE, echo=TRUE}
RT_outliers <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant) %>%
  filter(RT>200 & acc==1 & E1==0) %>% 
  summarise(meanRT = mean(RT, na.rm = TRUE)) %>% 
  identify_outliers(meanRT)
RT_exclude <- subset(RT_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,RT_exclude)
excludeSubjs <- unique(excludeSubjs)
```
1 excluded with 88 subjects total
## ACC data cleaning`
```{r Summarise Accuracy Data, warning=FALSE}
summary_ACC <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant) %>% 
  summarise(ACC = mean(acc, na.rm = TRUE),
            count=sum(!is.na(RT)), .groups = "keep")
summary(summary_ACC)
```
``` {r Plot Accuracy Histogram}
summary_ACC %>% 
  ggplot(aes(x=ACC)) + 
  geom_histogram(bins=10) + 
  geom_vline(aes(xintercept=median(ACC)), color="blue", linetype="dashed", size=1) +
  scale_x_continuous(name="Accuracy", breaks = seq(0, 1, .05)) +
  scale_y_continuous(name = "Count", breaks = seq(0,60,5))
```
All levels of platform and platform have similar distributions for ACC
``` {r Check acc outliers}
ACC_outliers <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant) %>% 
  summarise(ACC = mean(acc, na.rm = TRUE)) %>% 
  identify_outliers(ACC)
ACC_exclude <- subset(ACC_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,ACC_exclude)
excludeSubjs <- unique(excludeSubjs)
```
Exclude 5 ACC outliers out of 146

## Training QC
### Compare points_total during training to identify outliers
``` {r}
summary_training <- fulldata %>% 
  filter(condition == "training") %>% 
  group_by(participant) %>% 
  summarise(points = sum(points_trial), sd = sd(points_trial))
summary(summary_training)

summary_training %>% ggplot(aes(x=points)) + geom_histogram(bins=10)
# training_outliers <- summary_training %>%
#   identify_outliers(points)
#   
#   filter(points < 500) %>%
#   select(participant)
# excludeSubjs <- rbind(excludeSubjs, training_outliers)
# excludeSubjs <- unique(excludeSubjs)
```

## task choice data cleaning
```{r summary of task choice, warning=FALSE}
summary_task_choice <- fulldata %>%
  filter(!condition == "training") %>% 
  group_by(participant, task) %>% 
  summarise(n = n(), .groups = "drop_last") %>% 
  summarise(lettProp = sum(n[task=="letter"])/sum(n))
summary(summary_task_choice)
```
```{r plot task choice histogram}
summary_task_choice %>% 
  ggplot(aes(x=lettProp)) + 
  geom_histogram(bins=10) + 
  geom_vline(aes(xintercept=median(lettProp)), color="blue", linetype="dashed", size=1) + 
  scale_x_continuous(name="Letter Task Choice Proportion", breaks = seq(0, 1, .1)) +
  scale_y_continuous(name = "Count", breaks = seq(0,100,10))
```
All levels of platform and platform have similar distributions and medians for Task Choice
```{r Check for task choice outliers, warning=FALSE}
task_outliers <- summary_task_choice %>% 
  identify_outliers(lettProp)
task_exclude <- subset(task_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,task_exclude)
excludeSubjs <- unique(excludeSubjs)
```
5 outliers out of 146
## VSR data cleaning
```{r Summarise switch rate, warning=FALSE}
summary_VSR <- fulldata %>% 
  group_by(participant, alt) %>%
  summarise(n = n(), .groups = "drop_last") %>%
  summarise(VSR = n[alt=="switch"]/sum(n), count=sum(n), .groups = "keep") %>% 
  filter(!is.na(VSR))
summary(summary_VSR)
```
``` {r Plot VSR distribution}
summary_VSR %>% 
  ggplot(aes(x=VSR)) + 
  geom_histogram(bins=10) +
  geom_vline(aes(xintercept=median(VSR)), color="blue", linetype="dashed", size=1) +
  scale_x_continuous(name="Voluntary Switch Rate", breaks = seq(0.0, 1.0, .1)) +
  scale_y_continuous(name = "Count", breaks = seq(0,50,5))
```
All levels of platform and platform have similar distributions and medians for VSR
``` {r Check for VSR Outliers}
summary_VSR %>% 
  identify_outliers(VSR)

# normal outlier detection doesn't work on these probability data because Q1-3*IQR is negative
# so calculate by hand using the same criteria to ID extreme outliers (3*IQR)
Q1 = quantile(summary_VSR$VSR, probs = .25); Q3 = quantile(summary_VSR$VSR, probs = .75);
IQR = Q3-Q1
VSR_exclude <- summary_VSR %>% 
  filter( (VSR < Q1-3*IQR) || (VSR > Q3+3*IQR) ) %>% 
  ungroup() %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,VSR_exclude)
excludeSubjs <- unique(excludeSubjs)
```
0 VSR outliers, range is too large so Q1-3*IQR is negative
## Remove outliers from data to enter into analysis
``` {r Remove outliers from data, warning=FALSE, echo=FALSE}
cleandata <- fulldata %>% 
  filter(! participant %in% excludeSubjs$participant) %>% 
  filter(!condition == "training") %>% 
  filter(!rewCond == "noRew") %>% 
  droplevels()


# participant_demos <- participant_demos %>% 
#   filter(ID %in% cleandata$participant) %>% 
#   rename(participant = ID) %>% 
#   filter(!is.na("BAS_Drive"))
# participant_demos$participant <- as.factor(participant_demos$participant)
# 
# cleandata.w.demos <- cleandata %>% group_by(participant) %>% filter(participant %in% participant_demos$participant)
# 
# cleandata.w.demos <- left_join(cleandata.w.demos, participant_demos, by=c("participant"))

cleanRTdata <- filter(cleandata, RT>200 & acc==1, E1==0)
cleanACCdata <- filter(cleandata, RT>200)
cleanChoicedata <- filter(cleandata, RT>200)

# cleanRTdata.w.demos <- filter(cleandata.w.demos, RT>200 & acc==1, E1==0)
# cleanACCdata.w.demos <- filter(cleandata.w.demos, RT>200)
# cleanChoicedata.w.demos <- filter(cleandata.w.demos, RT>200)
  
# included_subjs <- cleandata.w.demos %>% group_by(participant) %>% summarise(n=n()) %>% select(participant)
```
#RT Analyses
<!-- ```{julia} -->
<!-- using Pkg -->
<!-- Pkg.add("IJulia") -->
<!-- using IJulia -->
<!-- notebook() -->
<!-- ``` -->

```{r GLMM - RT}
# Set contrasts
contrasts(cleanRTdata$alt) <- contr.sum(2)
contrasts(cleanRTdata$rewCond) <- contr.sum(2)
contrasts(cleanRTdata$rewExpect) <- contr.sum(2)
contrasts(cleanRTdata$platform) <- contr.sum(2)

rt_m1 <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 + alt*rewCond*rewExpect | participant), data = cleanRTdata, check_contrasts = TRUE)
rt_m2 <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 + alt*rewCond*rewExpect || participant), data = cleanRTdata, check_contrasts = TRUE)
rt_m3 <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 + alt+rewCond+rewExpect | participant), data = cleanRTdata, check_contrasts = TRUE)
rt_m4 <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 + alt+rewCond+rewExpect || participant), data = cleanRTdata, check_contrasts = TRUE)
rt_m5 <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 | participant), data = cleanRTdata, check_contrasts = TRUE, REML=FALSE)

rt_m3_gamma <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 + alt+rewCond+rewExpect | participant), data = cleanRTdata, method="LRT", family=Gamma(link="identity"), check_contrasts = TRUE)
rt_m5_gamma <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 | participant), data = cleanRTdata, method="LRT", family=Gamma(link="identity"), check_contrasts = TRUE)
rt_m5_gauss <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 | participant), data = cleanRTdata, method="LRT", family=gaussian(link="log"), check_contrasts = TRUE, nAGQ=0)


rt_m0 <- lmer(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 | participant), data = cleanRTdata, REML=FALSE)
res.rtm0 <- residuals(rt_m0)
qqnorm(res.rtm0)

rt_m0log <- mixed(formula = RT ~ 1 + alt*rewCond*rewExpect + (1 | participant), data = cleanRTdata, family=gaussian(link = "log"), check_contrasts = TRUE, all_fit=TRUE, method="LRT")
res.rtm0log <- residuals(rt_m0log)
qqnorm(res.rtm0log) + qqline(res.rtm0log)


summary(rt_m2)
```

# Accuracy analysis
```{r Setup data for ACC glmm}
summaryACCstats <- cleanACCdata %>% 
  group_by(participant, rewExpect, rewCond, platform) %>% 
  summarise(ACC = mean(acc, na.rm = TRUE), .groups = "keep") 
summaryACCstats %>%  ggplot(aes(x = interaction(rewExpect,rewCond), y = ACC)) +
  ggbeeswarm::geom_quasirandom(alpha = 0.2) +
  geom_boxplot(fill = "transparent") +
  stat_summary(color = "red", fun = mean) +
  facet_row("rewExpect") + facet_col("platform") + theme_ggeffects()
```

```{r model acc effects}
acc_m1 <- mixed(formula = ACC ~ rewExpect*rewCond*platform + (1|participant), 
                data = summaryACCstats, check_contrasts = TRUE, all_fit = TRUE)
summary(acc_m1)
afex_plot(acc_m1, x = "rewCond")
```
# VSR by reward expectancy
```{r GLMM - VSR by current and previous reward and rewExpect}
# Set contrasts
contrasts(cleanChoicedata$alt) <- contr.sum(2)
contrasts(cleanChoicedata$rewExpect) <- contr.sum(2)
contrasts(cleanChoicedata$prevRew) <- contr.sum(6)
contrasts(cleanChoicedata$rewCond) <- contr.sum(2)
```
### Summarise data
```{r Summary VSR by Prev and Curr Reward}
summary_VSR_Rew <- cleanChoicedata %>% 
  group_by(participant, platform, prevRew, rewExpect, rewCond, alt) %>% 
  filter(!is.na(alt)) %>% 
  summarise(n = n(), .groups = "drop_last") %>%
  ungroup() %>% 
  complete(nesting(participant, platform, rewExpect), prevRew, rewCond, alt, fill = list(n = 0)) %>% 
  group_by(participant, platform, rewExpect, prevRew, rewCond) %>%
  summarise(VSR = n[alt=="switch"]/sum(n), count=sum(n), .groups = "keep")

summary_VSR_Rew %>% ungroup() %>% 
  ggplot(aes(x = interaction(rewExpect,rewCond), y = VSR)) +
  ggbeeswarm::geom_quasirandom(alpha = 0.3) +
  geom_boxplot(fill = "transparent") +
  theme_ggeffects()
```
```{r}
switch_m1 <- mixed(formula = alt ~ prevRew*rewCond*rewExpect + (1 | participant), data = cleanChoicedata, 
            family = binomial(), check_contrasts = TRUE, method = "LRT")
summary(switch_m1)
```


### Load julia models
``` {r VSR Prev Curr Reward Julia Best Fit}
rew_m6_choice <- readRDS(here('Rdata','vsr_rew_m6j.Rds'))
summary(rew_m6_choice)
tab_model(rew_m6_choice, show.icc = F, show.re.var = F, show.obs = F, dv.labels = "", wrap.labels = 50, show.ngroups = F, digits = 4)
```
Model 6 is the best fit - uncorrelated additive RE
```{r Check model assumptions}
res.m6 <- residuals(rew_m6_choice)
qqnorm(res.m6,)
```
#### Explore predictions for julia m6 model
```{r Plot 4-way interaction, message=FALSE}
emm_options(lmer.df = "asymptotic")
theme_set(theme_sjplot2(base_size = 15, base_family = "Arial") +
theme(legend.position = "top"))
plot_model(rew_m6_choice, type = "emm", terms = c("prevRew", "rewCond","version","platform[inlab]"), axis.title = c("Previous Reward Outcome","Probability of Switch"), title = "", legend.title = "Current Reward", axis.lim = c(.15,.45))
ggsave("SR_4way_inlab_plot.pdf", device = cairo_pdf, path = here("Rdata"))
plot_model(rew_m6_choice, type = "emm", terms = c("prevRew", "rewCond","version","platform[online]"), axis.title = c("Previous Reward Outcome","Probability of Switch"), title = "", legend.title = "Current Reward", axis.lim = c(.15,.45))
ggsave("SR_4way_online_plot.pdf", device = cairo_pdf, path = here("Rdata"))
```
```{r sr emmeans 1 - prevRew rewCond version platform}
emm_sr1 <- emmeans(rew_m6_choice, specs = pairwise ~ prevRew:rewCond, by = c("version","platform"))
emm_sr1_summ <- emm_sr1$contrasts %>% summary(infer = T)
xtable(emm_sr1_summ)
```

```{r EMM table for interaction of previous & current reward by version}
emm1 <- emmeans(rew_m4_choice, specs = c("prevRew","rewCond","version"), type = "response")
custom <- list("HH-LL" = c(-1, 0, 0, 0, 1, 0, -1, 0, 0, 0, 1, 0),
               "HH-Inc" = c(0, 0, 0, -1, 1, 0, 0, 0, 0, -1, 1, 0),
               "HH-Dec" = c(0, -1, 0, 0, 1, 0, 0, -1, 0, 0, 1, 0), 
               "HH-sH" = c(0, 0, 0, 0, 1, -1, 0, 0, 0, 0, 1, -1),
               "HH-sL" = c(0, 0, -1, 0, 1, 0, 0, 0, -1, 0, 1, 0),
               "HH-LL-V" = c(-1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0),
               "HH-Inc-V" = c(0, 0, 0, -1, 1, 0, 0, 0, 0, 1, -1, 0),
               "HH-Dec-V" = c(0, -1, 0, 0, 1, 0, 0, 1, 0, 0, -1, 0),
               "HH-sH-V" = c(0, 0, 0, 0, 1, -1, 0, 0, 0, 0, -1, 1),
               "HH-sL-V" = c(0, 0, -1, 0, 1, 0, 0, 0, 1, 0, -1, 0))
contrast(regrid(emm1), method = custom, type = "response", adjust = "holm")
```
```{r Plot 3-way interaction prev curr rew by version, message=FALSE}
plot_model(rew_m4_choice, type = "pred", terms = c("prevRew", "rewCond","version"), legend.title = "Reward Prospect", 
           axis.title = c("Previous Reward", "Switch Probability"), colors = "Dark2", title = "")
ggsave("3way_int_plot.pdf", device = cairo_pdf, path = here("Rdata"))
```

```{r vsr rew emmeans 1 - prevRew by rewCond by version}
emm_rew1 <- emmeans(rew_m4_choice, specs = c("prevRew","rewCond", by = c("version")))
pairs(emm_rew1, by=NULL) %>% summary(infer = TRUE)
plot_model(rew_m4_choice, type = "emm", terms = c("prevRew","rewCond","version"))
```
```{r vsr rew emmeans 2 - prewRew by rewCond by platform}
emm_rew1 <- emmeans(rew_m4_choice, specs = c("prevRew","rewCond", by = c("platform")))
pairs(emm_rew1, by=NULL) %>% summary(infer = TRUE)
plot_model(rew_m4_choice, type = "emm", terms = c("prevRew","rewCond","platform"))
```
```{r ANOVA-like table for rew_m3}
joint_tests(rew_m4_choice)
```

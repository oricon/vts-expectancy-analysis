---
title: "VTS_RewardExpectancy"
author: "Joseph Orr"
format: html
editor: visual
---

```{r Setup Libraries, message=FALSE, warning=FALSE, include=FALSE}
library(here)
library(tidyverse)
library(data.table)
library(rstatix)
library(zoo)
library(ggforce)
library(ggpubr)
library(afex)
library(optimx)
library(emmeans)
library(ggeffects)
library(ggbeeswarm)
library(sjPlot)
library(viridis)
library(RColorBrewer)
library(xtable)
library(redcapAPI)
```

```{r Setup path, include=FALSE}
workdir=here()
knitr::opts_knit$set(root.dir = workdir)
```

# Read in data

```{r Read in raw data, include=FALSE, warning=FALSE}
filelist<- Sys.glob(file.path(workdir,"data","*","*vts_reward_expectancy_bt*.csv"))
fulldata <- data.frame()

for (file in filelist) {
  rawdata <- fread(file, nThread = 6)
  if ("OS" %in% colnames(rawdata)) {
    data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul, 
                               alt, task, condition, rewExpectancy, rewCond, curr_shape, curr_topStim, 
                               curr_bottStim, blockNum, LShape_ID, RShape_ID, 
                               trainBlock, training.thisN, training_resp.keys, training_resp.rt, 
                               target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN,
                               OS, browser, xResolution, yResolution)
    data$platform = "online"
    } else if ("rewExpectancy" %in% colnames(rawdata)) {
      data <- rawdata %>% select(participant, acc, E1, points_trial, points_cumul, 
                               alt, task, condition, rewExpectancy, rewCond, curr_shape, curr_topStim, 
                               curr_bottStim, blockNum, LShape_ID, RShape_ID, 
                               trainBlock, training.thisN, training_resp.keys, training_resp.rt, 
                               target_resp.rt, target_resp.keys, trials_norew.thisRepN, trials_rew.thisRepN)
      data$platform = "inlab"
      data$OS = "MacIntel"
      data$browser = NA
      data$xResolution = NA
      data$yResolution = NA
    }
  
  data <- data %>% 
    mutate(condition = ifelse(!is.na(training.thisN), "training", data$condition))
  
  data$participant <- as_factor(data$participant)
  
  # Collapse trial numbers, code as numeric
  data <- unite(data, trialNum, c(training.thisN, trials_norew.thisRepN, trials_rew.thisRepN), na.rm = TRUE)
  data$trialNum <- as.numeric(data$trialNum)
  data <- data %>% filter(!is.na(trialNum))
  data$blockNum = 0
  n=0
  for (row in 1:nrow(data)) {
    if (data[row, "trialNum"]==0) {
      data[row, "blockNum"]=n+1
      n=n+1
      } else {
        data[row, "blockNum"]=n
      }
    }
  data$blockNum <- as.factor(data$blockNum)
  
  data <- data %>% 
    filter(!rewCond == "vtsPrac") %>% 
    filter(!(condition == "" & task == ""))
  fulldata <- rbind.data.frame(fulldata,data)
}
```

## Recode variable

```{r Recode variables}
fulldata <- unite(fulldata, RT, c(training_resp.rt, target_resp.rt), na.rm = TRUE)
fulldata$RT <- as.numeric(fulldata$RT)
fulldata$RT <- fulldata$RT * 1000 # convert from sec to ms  


fulldata <- rename(fulldata, shape = curr_shape)
fulldata <- fulldata %>% 
  mutate(condition = ifelse(acc == 0, "error", fulldata$condition))

fulldata <- fulldata %>% 
  mutate(condition = ifelse(!is.na(trainBlock), "training", fulldata$condition))
  
# Set rewExpectancy and rewCond as factors
fulldata$rewCond <- as.factor(fulldata$rewCond)
fulldata$rewCond <- relevel(fulldata$rewCond, "Hi")
fulldata <- fulldata %>%
  mutate_if(is.character, list(~na_if(.,""))) %>% 
  fill(rewExpectancy, .direction = "up")
fulldata$rewExpectancy <- as.factor(fulldata$rewExpectancy)
fulldata$rewExpectancy <- factor(fulldata$rewExpectancy, levels = c("low", "high"))
fulldata$rewExpectancy <- relevel(fulldata$rewExpectancy, "high")

# Previous Trial Reward Outcome
fulldata$prevRew=NA
fulldata <- fulldata %>% 
  mutate(prevRew = case_when(E1 == 1 ~ "error",
                             trialNum>0 & E1==0 & lag(rewCond)=="Lo" & lag(points_trial)==1  ~ "lo",
                             trialNum>0 & E1==0 & lag(rewCond)=="Lo" & lag(points_trial)==10 ~ "lo+",
                             trialNum>0 & E1==0 & lag(rewCond)=="Hi" & lag(points_trial)==10 ~ "hi",
                             trialNum>0 & E1==0 & lag(rewCond)=="Hi" & lag(points_trial)==1  ~ "hi-",
                             trialNum>0 & E1==0 & lag(rewCond)=="Hi" & lag(points_trial)==0  ~ "hiSlow"))
fulldata <- relocate(fulldata, prevRew, .before = rewCond)
fulldata$prevRew <- as.factor(fulldata$prevRew)
fulldata$prevRew <- factor(fulldata$prevRew, levels = c("hi", "lo", "hiSlow", "hi-", "lo+", "error")) 

# Recode as factors
fulldata$alt <- as.factor(fulldata$alt)
fulldata$alt <- relevel(fulldata$alt, "repeat")
fulldata$platform <- as.factor(fulldata$platform)
fulldata$platform <- relevel(fulldata$platform, "inlab")
init_subs <- fulldata %>% group_by(participant) %>% tally()
```

# Read data from REDcap surveys

```{r Read survey data, eval=FALSE, include=FALSE}
Online_TOKEN = "8092328E3AA4D7901F5341ADA9DD1177"
Inlab_TOKEN = "A171103888A7D82C027463ACE9957867"
URL = "https://redcap.tamhsc.edu/api/"
rcon <- redcapConnection(url=URL, token=Online_TOKEN)
df_redcap_online <- exportRecords(rcon)
rcon <- redcapConnection(url=URL, token=Inlab_TOKEN)
df_redcap_inlab <- exportRecords(rcon)


demos_online <- df_redcap_online %>% 
  select('sona_id','genderid','age','colorblind','education', 'consent_timestamp')
demos_online$sona_id <- as.numeric(demos_online$sona_id)
demos_online <- demos_online %>% 
  group_by(sona_id) %>% 
  arrange(consent_timestamp) %>% 
  filter(consent_timestamp == first(consent_timestamp))

demos_inlab <- df_redcap_inlab %>% 
  select('sona_id','genderid','age','colorblind','education', 'consent_timestamp')
demos_inlab$sona_id <- as.numeric(demos_inlab$sona_id)
demos_inlab <- demos_inlab %>% 
  group_by(sona_id) %>% 
  arrange(consent_timestamp) %>% 
  filter(consent_timestamp == first(consent_timestamp))

demos <- rbind(demos_inlab, demos_online)
demos <- demos %>% distinct(sona_id, .keep_all = TRUE)
only_surveys <- demos$sona_id[!(demos$sona_id %in% fulldata$participant)]
participant_demos <- demos %>% filter(sona_id %in% fulldata$participant)
```

```{undefined eval=FALSE, include=FALSE}
# Convert Race to 1/0 - When multiple are selected the totals will be more than the total n
participant_demos <- participant_demos %>% mutate(Race_White = ifelse(!is.na(Race_White),1,0)) %>% 
  mutate(Race_Hispanic = ifelse(!is.na(Race_Hispanic),1,0)) %>% 
  mutate(Race_Black = ifelse(!is.na(Race_Black),1,0)) %>% 
  mutate(Race_NativeHaw = ifelse(!is.na(Race_NativeHaw),1,0)) %>% 
  mutate(Race_Asian = ifelse(!is.na(Race_Asian),1,0)) %>% 
  mutate(Race_Indian = ifelse(!is.na(Race_Indian),1,0)) %>% 
  mutate(Race_MiddleEast = ifelse(!is.na(Race_MiddleEast),1,0)) %>% 
  mutate(Race_Other = ifelse(!is.na(Race_Other),1,0)) %>% 
  mutate(Race_Mixed = ifelse(!is.na(Race_Mixed),1,0))

# Convert BISBAS to Numerical for Easy Tabulation
participant_demos <- participant_demos %>% 
  mutate_at(vars(starts_with("BISBAS")),
            ~ case_when(. == "Very False For Me" ~ 1, 
                        . == "Somewhat False For Me" ~ 2, 
                        . == "Somewhat True For Me" ~ 3, 
                        . == "Very True For Me" ~ 4))

# BAS Drive = 3, 9, 12, 21
# BAS Fun Seeking = 5, 10, 15, 20
# BAS Reward Responsiveness = 4, 7, 14, 18, 23
# BIS = 2(-1), 8, 13, 16, 19, 22(-1), 24
participant_demos <- participant_demos %>% 
  mutate(BAS_Drive = (BISBAS3 + BISBAS9 + BISBAS12 + BISBAS21)) %>% 
  mutate(BAS_Fun = (BISBAS5 + BISBAS10 + BISBAS15 + BISBAS20)) %>% 
  mutate(BAS_RR = (BISBAS4 + BISBAS7 + BISBAS14 + BISBAS18 + BISBAS23)) %>% 
  mutate(BISBAS2 = 6 - BISBAS2) %>% 
  mutate(BISBAS22 = 6 - BISBAS22) %>% 
  mutate(BIS = (BISBAS2 + BISBAS8 + BISBAS13 + BISBAS16 + BISBAS19 + BISBAS22 + BISBAS24))

center_scale <- function(x) {
    scale(x, scale = FALSE)
}

# Convert substance use
participant_demos <- participant_demos %>% 
  mutate(Tobacco_Freq = case_when(Tobacco_Freq == "Frequently (> 5 a day)" ~ 5,
                        Tobacco_Freq == "Daily (< 5 a day)" ~ 4,
                        Tobacco_Freq == "Occasionally (3-4 a week)" ~ 3,
                        Tobacco_Freq == "Rarely (~1 a week)" ~ 2,
                        Tobacco_Freq == "Never" ~ 1)) %>% 
  mutate(AlcoholFreq = case_when(AlcoholFreq == "More than 5 times a week" ~ 5,
                                 AlcoholFreq == "2-3 times a week" ~ 4,
                                 AlcoholFreq == "1-2 times a week" ~ 3,
                                 AlcoholFreq == "Only occasionally" ~ 2,
                                 AlcoholFreq == "Never" ~ 1)) %>% 
  mutate(AlcoholQuant = case_when(AlcoholQuant == "More than 5 drinks" ~ 5,
                                  AlcoholQuant == "3-5 drinks" ~ 4,
                                  AlcoholQuant == "1-2 drinks" ~ 3,
                                  AlcoholQuant == "Only occasionally" ~ 2,
                                  AlcoholQuant == "Never" ~ 1)) %>% 
  mutate(DrugsFreq = case_when(DrugsFreq == "Daily" ~ 5,
                               DrugsFreq == "3-5 times a week" ~ 4,
                               DrugsFreq == "1-2 times a week" ~ 3,
                               DrugsFreq == "Only occasionally" ~ 2,
                               DrugsFreq == "Never" ~ 1))

median(participant_demos$Age, na.rm = TRUE)
sd(participant_demos$Age, na.rm = TRUE)
# Convert all character columns to factors to make it easier to tabulate
index <- 1:(ncol(participant_demos)-4)
participant_demos[ , index] <- 
  lapply(participant_demos[ , index], as.factor)
summary(participant_demos)
```

# Data cleaning
## RT data cleaning
```{r Summary stats for RT data, echo=TRUE}
summary_RT <- fulldata %>% 
  filter(!condition == "training") %>% 
  filter(rewExpectancy=="low" | rewExpectancy=="high") %>% 
  group_by(participant, rewExpectancy) %>%
  filter(RT>200 & acc==1 & E1==0) %>% 
  summarise(meanRT = mean(RT, na.rm = TRUE),
            sdRT = sd(RT, na.rm = TRUE),
            count = sum(!is.na(RT)), .groups = "keep")
summary(summary_RT)
```

```{r Plot RT Histogram, echo=TRUE}
summary_RT %>% 
  ggplot(aes(x=meanRT)) + 
  geom_histogram(bins=15) +
  geom_vline(data = filter(summary_RT, rewExpectancy=="high"),
             aes(xintercept=median(meanRT)), color="blue", linetype="dashed", linewidth=1) +
  geom_vline(data = filter(summary_RT, rewExpectancy=="low"),
             aes(xintercept=median(meanRT)), color="red", linetype="dashed", linewidth=1) +
  scale_x_continuous(name="Mean RT", breaks = seq(400,1800,200)) +
  scale_y_continuous(name = "Count", breaks = seq(0,100,10))
```

```{r Determine RT outliers, warning=FALSE, echo=TRUE}
RT_outliers <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant) %>%
  filter(RT>200 & acc==1 & E1==0) %>% 
  summarise(meanRT = mean(RT, na.rm = TRUE)) %>% 
  identify_outliers(meanRT)
RT_exclude <- subset(RT_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- RT_exclude
excludeSubjs <- unique(excludeSubjs)
```
1 outliers

## ACC data cleaning
```{r Summarise Accuracy Data, warning=FALSE}
summary_ACC <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant) %>% 
  summarise(ACC = mean(acc, na.rm = TRUE),
            count=sum(!is.na(RT)), .groups = "keep")
summary(summary_ACC)
```

```{r Plot Accuracy Histogram}
summary_ACC %>% 
  ggplot(aes(x=ACC)) + 
  geom_histogram(bins=20) + 
  geom_vline(aes(xintercept=median(ACC)), color="blue", linetype="dashed", size=1) +
  scale_x_continuous(name="Accuracy", breaks = seq(0, 1, .05)) +
  scale_y_continuous(name = "Count", breaks = seq(0,70,10))
```

All levels of platform and platform have similar distributions for ACC

```{r Check acc outliers}
ACC_outliers <- fulldata %>% 
  filter(!condition == "training") %>% 
  group_by(participant) %>% 
  summarise(ACC = mean(acc, na.rm = TRUE)) %>% 
  identify_outliers(ACC)
ACC_exclude <- subset(ACC_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,ACC_exclude)
excludeSubjs <- unique(excludeSubjs)
```
3 outliers

## Training QC
### Compare points_total during training to identify outliers
```{r}
summary_training <- fulldata %>% 
  filter(condition == "training") %>% 
  group_by(participant, rewExpectancy) %>% 
  summarise(points = sum(points_trial), sd = sd(points_trial))
summary(summary_training)

summary_training %>% ggplot(aes(x=points, fill=rewExpectancy)) + 
  geom_histogram(bins=15) + 
  geom_vline(data = filter(summary_training, rewExpectancy=="high"),
             aes(xintercept=median(points)), color="red", linetype="dashed", size=1) +
  geom_vline(data = filter(summary_training, rewExpectancy=="low"),
             aes(xintercept=median(points)), color="blue", linetype="dashed", size=1)
# training_outliers <- summary_training %>%
#   identify_outliers(points)
#   
#   filter(points < 500) %>%
#   select(participant)
# excludeSubjs <- rbind(excludeSubjs, training_outliers)
# excludeSubjs <- unique(excludeSubjs)
```

## task choice data cleaning
```{r summary of task choice, warning=FALSE}
summary_task_choice <- fulldata %>%
  filter(!condition == "training") %>% 
  group_by(participant, task) %>% 
  summarise(n = n(), .groups = "drop_last") %>% 
  summarise(lettProp = sum(n[task=="letter"])/sum(n))
summary(summary_task_choice)
```

```{r plot task choice histogram}
summary_task_choice %>% 
  ggplot(aes(x=lettProp)) + 
  geom_histogram(bins=25) + 
  scale_x_continuous(name="Letter Task Choice Proportion", breaks = seq(0, 1, .1)) +
  scale_y_continuous(name = "Count", breaks = seq(0,100,10))
```

```{r Check for task choice outliers, warning=FALSE}
task_outliers <- summary_task_choice %>% 
  identify_outliers(lettProp)
task_exclude <- subset(task_outliers,is.extreme=="TRUE") %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,task_exclude)
excludeSubjs <- unique(excludeSubjs)
```
9 outliers

## Switch data
```{r Summarise switch rate, warning=FALSE}
summary_VSR <- fulldata %>% 
  group_by(participant, alt) %>%
  summarise(n = n(), .groups = "drop_last") %>%
  summarise(VSR = n[alt=="switch"]/sum(n), count=sum(n), .groups = "keep") %>% 
  filter(!is.na(VSR))
summary(summary_VSR)
```

```{r Plot VSR distribution}
summary_VSR %>% 
  ggplot(aes(x=VSR)) + 
  geom_histogram(bins=15) +
  geom_vline(aes(xintercept=median(VSR)), color="blue", linetype="dashed", size=1) +
  scale_x_continuous(name="Voluntary Switch Rate", breaks = seq(0.0, 1.0, .1)) +
  scale_y_continuous(name = "Count", breaks = seq(0,50,5))
```

All levels of platform and platform have similar distributions and medians for VSR

```{r Check for VSR Outliers}
summary_VSR %>% 
  identify_outliers(VSR)

# normal outlier detection doesn't work on these probability data because Q1-3*IQR is negative
# so calculate by hand using the same criteria to ID extreme outliers (3*IQR)
Q1 = quantile(summary_VSR$VSR, probs = .25); Q3 = quantile(summary_VSR$VSR, probs = .75);
IQR = Q3-Q1
VSR_exclude <- summary_VSR %>% 
  filter( (VSR < Q1-3*IQR) || (VSR > Q3+3*IQR) ) %>% 
  ungroup() %>% select(participant)
excludeSubjs <- rbind(excludeSubjs,VSR_exclude)
excludeSubjs <- unique(excludeSubjs)
```
## Remove outliers
```{r Remove outliers from data, warning=FALSE, echo=FALSE}
cleandata <- fulldata %>% 
  filter(! participant %in% excludeSubjs$participant) %>% 
  filter(!condition == "training") %>% 
  filter(!is.na(rewCond)) %>% 
  filter(RT > 200) %>% 
  droplevels()
cleandata <- cleandata %>% 
  mutate(blockNum = recode(blockNum, "4"="1",
                           "5" = "2",
                           "6" = "3",
                           "7" = "4",
                           "8" = "5",
                           "9" = "6",
                           "10" = "7",
                           "11" = "8",
                           "12" = "9"))


participant_demos <- participant_demos %>% 
  filter(sona_id %in% cleandata$participant) %>% 
  rename(participant = sona_id)
participant_demos$participant <- as.factor(participant_demos$participant)
cleandata.w.demos <- cleandata %>% group_by(participant) %>% filter(participant %in% participant_demos$participant)
cleandata.w.demos <- left_join(cleandata.w.demos, participant_demos, by=c("participant"))
included_subjs <- cleandata.w.demos %>% group_by(participant) %>% summarise(n=n()) %>% select(participant)
```

#RT Analyses
## RT by block
```{r Plot RT by block}
summary_corrRT <- cleandata %>% 
  filter(acc == 1 & E1 == 0) %>% 
  filter(!(blockNum == 1 & trialNum < 32)) %>% 
  group_by(participant, blockNum) %>% 
  summarise(meanRT = mean(RT, na.rm = TRUE), .groups="keep")

ggplot(data = summary_corrRT, aes(x=factor(blockNum), y=meanRT, fill=factor(blockNum))) +
  geom_violin(aes(fill=factor(blockNum)), show.legend = FALSE, alpha = .8) +
  geom_boxplot(color="Dark Gray", alpha=.4, width=.3, position = position_dodge(.8), show.legend = FALSE) +
  theme_minimal() + scale_y_continuous(breaks = seq(200,1500,250)) +
  xlab(label = "Block Number") + ylab(label = "Mean RT") +
  scale_fill_manual(values = c("#FDE725FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF"))
ggsave(filename = "RT_block.pdf", device = cairo_pdf, path = here("Rdata"))
```

```{r}
cleanRTdata <- cleandata %>%
  filter(rewCond == "Lo" | rewCond == "Hi") %>% 
  filter(acc == 1 & E1 == 0) %>% 
  filter(rewExpectancy == "low" | rewExpectancy == "high") %>% 
  droplevels()
summary_cleanRT <- cleanRTdata %>% 
  group_by(participant, rewExpectancy, alt) %>% 
  tally()
```

```{r GLMM - RT}
# Set contrasts
contrasts(cleanRTdata$alt) <- contr.sum(2)
contrasts(cleanRTdata$rewCond) <- contr.sum(2)
contrasts(cleanRTdata$rewExpectancy) <- contr.sum(2)
contrasts(cleanRTdata$platform) <- contr.sum(2)
write_rds(cleanRTdata, here("Rdata","cleanRTdata.Rds"))

rt_m0 <- lmer(formula = RT ~ 1 + alt*rewCond*rewExpectancy + (1 | participant), data = cleanRTdata, REML=FALSE)
res.rt <- residuals(rt_m0)
qqnorm(res.rt,)
```
## Load julia model
```{r}
rt_m1 <- readRDS(here("Rdata","rt_m1.Rds"))
summary(rt_m1)
```
## Plot pairwise
```{r}
emm_options(lmer.df = "asymptotic")
theme_set(theme_sjplot(base_size = 18, base_family = "Arial") +
theme(legend.position = "top"))
plot_model(rt_m1, type = "emm", terms = "alt", colors = "Dark2", 
           axis.title = c("Task Alternation", "Reaction Time"),
           scale_y_continuous(breaks = seq(400,800,50), limits = c(400,800)),
           title = "", line.size=1.5)
ggsave("rt_switchcost_plot.pdf", device = cairo_pdf, path = here("Rdata"))
```
# Accuracy analysis
## ACC by block
```{r Plot RT by block}
summary_ACCblock <- cleandata %>% 
  filter(!(blockNum == 1 & trialNum < 32)) %>% 
  group_by(participant, blockNum) %>% 
  summarise(meanACC = mean(acc, na.rm = TRUE), .groups="keep") %>% 
  filter(meanACC>.6)

ggplot(data = summary_ACCblock, aes(x=factor(blockNum), y=meanACC, fill=factor(blockNum))) +
  geom_violin(aes(fill=factor(blockNum)), show.legend = FALSE, alpha = .8) +
  geom_boxplot(color="Dark Gray", alpha=.4, width=.2, position = position_dodge(.8), show.legend = FALSE) +
  theme_minimal() + 
  xlab(label = "Block Number") + ylab(label = "Mean ACC") +
  scale_fill_manual(values = c("#FDE725FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF", "#440154FF"))
ggsave(filename = "ACC_block.pdf", device = cairo_pdf, path = here("Rdata"))
```

```{r Setup data for ACC glmm}
cleanACCdata <- cleandata %>% 
  filter(E1 == 0) %>% 
  filter(rewExpectancy == "low" | rewExpectancy == "high") %>%
  filter(!rewCond == "noRew")
write_rds(cleanACCdata, here("Rdata","acc_data.Rds"))
summaryACCstats <- cleanACCdata %>% 
  group_by(participant, rewExpectancy, rewCond) %>% 
  summarise(ACC = mean(acc, na.rm = TRUE), .groups = "keep") 
summaryACCstats %>%  ggplot(aes(x = rewCond, y = ACC)) +
  ggbeeswarm::geom_quasirandom(alpha = 0.2) +
  geom_boxplot(fill = "transparent") +
  stat_summary(color = "red", fun = mean) +
  facet_row("rewExpectancy") + theme_ggeffects()
```
## Examine julia research
```{r model acc effects}
acc_m1 <- readRDS(here("Rdata","acc_m1.Rds"))
summary(acc_m1)
```
## Plot pairwise
```{r}
emm_options(lmer.df = "asymptotic")
theme_set(theme_sjplot(base_size = 18, base_family = "Arial") +
theme(legend.position = "top"))
plot_model(acc_m1, type = "emm", terms = "rewExpectancy", colors = "Dark2", 
           axis.title = c("Reward Expectancy", "Accuracy"),
           title = "", line.size=1.5)
ggsave("acc_rewExpect_plot.pdf", device = cairo_pdf, path = here("Rdata"))
```

# VSR by reward expectancy
## Restricted model (high, low)
```{r GLMM - VSR by current and previous reward and rewExpectancy}
# Set contrasts
cleanChoicedata_restricted <- cleandata.w.demos %>% 
  filter(prevRew == "hi" | prevRew == "lo") %>% 
  droplevels()

contrasts(cleanChoicedata_restricted$alt) <- contr.sum(2)
contrasts(cleanChoicedata_restricted$rewExpectancy) <- contr.sum(2)
contrasts(cleanChoicedata_restricted$prevRew) <- contr.sum(2)
contrasts(cleanChoicedata_restricted$rewCond) <- contr.sum(2)
write_rds(cleanChoicedata_restricted, here("Rdata","choice_restrict_data.Rds"))
```

### Summarise data
```{r Summary VSR by Prev and Curr Reward}
summary_VSR_Rew <- cleanChoicedata_restricted %>% 
  group_by(participant, genderid, prevRew, rewExpectancy, rewCond, alt) %>% 
  filter(genderid == "Male" | genderid == "Female") %>% 
  filter(!is.na(alt)) %>% 
  summarise(n = n(), .groups = "drop_last") %>%
  group_by(participant, genderid, rewExpectancy, prevRew, rewCond) %>%
  summarise(VSR = n[alt=="switch"]/sum(n), count=sum(n), .groups = "keep")

summary_VSR_Rew %>% ungroup() %>% 
  ggplot(aes(x = rewExpectancy, y = VSR, color = genderid)) +
  ggbeeswarm::geom_quasirandom(alpha = 0.3) +
  geom_boxplot(fill = "transparent") +
  theme_ggeffects()
```
### Load julia model
```{r}
choice_restricted_m1 <- readRDS(here("Rdata","choice2_m1.Rds"))
summary(choice_restricted_m1)
```
### Plot pairwise
```{r}
emm_options(lmer.df = "asymptotic")
theme_set(theme_sjplot(base_size = 16, base_family = "Arial") +
            theme(legend.position = "top"))
plot_model(choice_restricted_m1, type = "emm", terms = "prevRew", 
           legend.title = "", colors = "Dark2", 
           axis.title = c("Previous Trial Reward Outcome", "Switch Probability"), 
           title = "", line.size=1.5)
ggsave("choice_prevRew2_prevRew_plot.pdf", device = cairo_pdf, path = here("Rdata"))
plot_model(choice_restricted_m1, type = "emm", terms = "rewCond", 
           legend.title = "", colors = "Dark2", 
           axis.title = c("Current Reward Prospect", "Switch Probability"), 
           title = "", line.size=1.5)
ggsave("choice_prevRew2_currRew_plot.pdf", device = cairo_pdf, path = here("Rdata"))
plot_model(choice_restricted_m1, type = "emm", terms = "rewExpectancy", 
           legend.title = "", colors = "Dark2", 
           axis.title = c("Reward Expectancy", "Switch Probability"), 
           title = "", line.size=1.5)
ggsave("choice_prevRew2_rewExpect_plot.pdf", device = cairo_pdf, path = here("Rdata"))
```

## All levels of previous reward
```{r GLMM - VSR by current and previous reward and rewExpectancy}
# Set contrasts
cleanChoicedata_noErr <- cleandata.w.demos %>% 
  filter(!prevRew == "error") %>% 
  filter(genderid == "Male" | genderid == "Female") %>% 
  droplevels()
cleanChoicedata_noErr$participant <- as.factor(cleanChoicedata_noErr$participant)
contrasts(cleanChoicedata_noErr$alt) <- contr.sum(2)
contrasts(cleanChoicedata_noErr$genderid) <- contr.sum(2)
contrasts(cleanChoicedata_noErr$rewExpectancy) <- contr.sum(2)
contrasts(cleanChoicedata_noErr$prevRew) <- contr.sum(5)
contrasts(cleanChoicedata_noErr$rewCond) <- contr.sum(2)
write_rds(cleanChoicedata_noErr, here('Rdata','choice_noErr_data.Rds'))
```

### Summarise data
```{r Summary VSR by Prev and Curr Reward}
summary_VSR_Rew <- cleanChoicedata_noErr %>%
  filter(genderid == "Female" | genderid == "Male") %>% 
  group_by(participant, genderid, prevRew, rewExpectancy, alt) %>% 
  filter(!is.na(alt)) %>% 
  summarise(n = n(), .groups = "drop_last") %>%
  ungroup() %>% 
  complete(nesting(participant, rewExpectancy), prevRew, alt, fill = list(n = 0)) %>% 
  group_by(participant, genderid, rewExpectancy, prevRew) %>%
  summarise(VSR = n[alt=="switch"]/sum(n), count=sum(n), .groups = "keep")

summary_VSR_Rew %>% ungroup() %>% 
  ggplot(aes(x = prevRew, y = VSR, color = genderid)) +
  ggbeeswarm::geom_quasirandom(alpha = 0.3) +
  geom_boxplot(fill = "transparent") +
  theme_ggeffects()
```

```{r}
choice_m5 <- read_rds(here("Rdata","choice_m5.Rds"))
summary(choice_m5)
joint_tests(choice_m5)
```

### Plot pairwise
```{r}
emm_options(lmer.df = "asymptotic")
theme_set(theme_sjplot(base_size = 16, base_family = "Arial") +
            theme(legend.position = "right"))
plot_model(choice_m6, type = "emm", terms = c("prevRew", "genderid", "rewExpectancy"), 
           legend.title = "Reward Expectancy", colors = "Dark2", 
           axis.title = c("Previous Trial Reward Outcome", "Switch Probability"), 
           title = "", line.size=1)
ggsave("choice_prevRew5_Expect_plot.pdf", device = cairo_pdf, path = here("Rdata"))
```
## Pairwise comparisons
```{r}
emm1 <- emmeans(choice_m5, ~prevRew * rewCond * rewExpectancy)
joint_tests(choice_m5, by = "rewExpectancy")
pairs(emm1, by=NULL)
pairs(emm1, simple = "prevRew")
#pairs(emm1, simple = "rewCond")
pw_comp <- pwpm(emm1, by = "rewExpectancy")
as.data.frame(pw_comp)
```

